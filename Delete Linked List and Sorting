#include <bits/stdc++.h>
using namespace std;
int n;

struct Node {
   int data;
   Node *next;
};

void traversal(Node *&head) {
   Node *temp = head;
   while( temp != 0 ) {
      cout << temp->data << " ";
      temp = temp->next;
   } cout << '\n';
}

void deleteFristNode(Node *&head1) {
   if( head1 == 0 ) {
      cout << "Can not delete the frist node in the linked list!\n";
      return;
   }
   Node *temp = head1;
   head1 = head1->next;
   free(temp);
}

void deleteLastNode(Node *&head1) {
   if( head1 == 0 ) {
      cout << "Can not delete the frist node in the linked list!\n";
      return;
   }
   else if( n == 1 ) {
      deleteFristNode(head1);
      return;
   }
   Node *temp = head1;
   while(temp->next->next != 0) {
      temp = temp->next;
   }
   free(temp->next);
   temp->next = 0;
}

void deleteSepecipicLocation(Node *head2, int pos) {
   if(pos < 1 || pos > n) {
      cout << "The position is invalid..\n";
      return;
   }
   if(pos == 1) {
      deleteFristNode(head2);
      return;
   }
   if(pos == n) {
      deleteLastNode(head2);
   }

   pos--, pos--;
   Node *temp = head2;
   while( pos-- ) {
      temp = temp->next;
   }

   Node *nextNode = temp->next;
   temp->next = nextNode->next;
   free(nextNode);
}

void bubbleSort(Node *&head) {
   int i = 0;

   while( i < n ) {

      Node *traverseNode = head;
      Node *prevNode = head;

      while( traverseNode->next ) {
         Node *ptr = traverseNode->next;

         if(traverseNode->data > ptr->data) {

            if(traverseNode == head) {
               traverseNode->next = ptr->next;
               ptr->next = traverseNode;
               head = prevNode = ptr;
            } else {
               traverseNode->next = ptr->next;
               ptr->next = traverseNode;
               prevNode->next = ptr;
               prevNode = ptr;
            }
         }

         prevNode = traverseNode;
         traverseNode = traverseNode->next;
         continue;
      }

      i++;
   }
}

int main() {
   Node *head1 = 0, *temp, *head2 = 0;
   int value;

   while( 1 ) {
      cin >> value;
      if( value == 0 ) {
         break;
      }

      Node *newNode = (Node*)malloc(sizeof(Node));
      newNode->data = value;
      newNode->next = 0;
      n++;

      if( head1 == 0 ) {
         head1 = newNode;
      } else {
         temp = head1;
         while( temp->next != 0 ) {
            temp = temp->next;
         }
         temp->next = newNode;
      }
   }

   deleteFristNode(head1);
   deleteLastNode(head1);
   traversal(head1);

   while( 1 ) {
      cin >> value;
      if( value == 0 ) {
         break;
      }

      Node *newNode = (Node*)malloc(sizeof(Node));
      newNode->data = value;
      newNode->next = 0;
      n++;

      if( head2 == 0 ) {
         head2 = newNode;
      } else {
         temp = head2;
         while( temp->next != 0 ) {
            temp = temp->next;
         }
         temp->next = newNode;
      }
   }

   deleteSepecipicLocation(head2, 3);
   traversal(head2);

   Node *head = head1;
   temp = head;

   while( temp->next != 0 ) {
      temp = temp->next;
   }
   temp->next = head2;

   bubbleSort(head);
   traversal(head);
}
